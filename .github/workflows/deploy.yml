name: CI/CD Pipeline - Build, Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: plant-classification-api
  IMAGE_TAG: latest

jobs:
  build-and-test:
    name: üèóÔ∏è Build & Test
    runs-on: self-hosted
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          
      - name: üîç Lint with flake8
        run: |
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
        
      - name: üìã Check model file
        run: |
          if [ ! -f "models/best_model.pth" ]; then
            if [ -f "models/checkpoints/best_model.pth" ]; then
              echo "üìù Copying model from checkpoints..."
              cp models/checkpoints/best_model.pth models/best_model.pth
            else
              echo "‚ö†Ô∏è Warning: Model file not found"
            fi
          else
            echo "‚úÖ Model file found"
          fi
          
      - name: üê≥ Build Docker image
        run: |
          echo "Building ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          
      - name: üß™ Test Docker container
        run: |
          echo "Starting test container..."
          docker run -d --name test-api -p 8080:8000 ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
          echo "Waiting for startup..."
          sleep 15
          
          echo "Testing health endpoint..."
          if curl -f http://localhost:8080/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            docker logs test-api
            exit 1
          fi
          
          echo "Cleanup..."
          docker stop test-api
          docker rm test-api

  deploy-to-kubernetes:
    name: üöÄ Deploy to K8s
    needs: build-and-test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: ‚ò∏Ô∏è Check Kubernetes
        run: |
          echo "Cluster info:"
          kubectl cluster-info
          echo ""
          echo "Nodes:"
          kubectl get nodes
          
      - name: üîß Apply ConfigMap
        run: |
          echo "Applying ConfigMap..."
          kubectl apply -f k8s/configmap.yaml
          
      - name: üöÄ Deploy Application
        run: |
          echo "Deploying application..."
          kubectl apply -f k8s/deployment.yaml
          
      - name: üìä Apply HPA
        run: |
          echo "Applying HorizontalPodAutoscaler..."
          kubectl apply -f k8s/hpa.yaml
          
      - name: ‚è≥ Wait for rollout
        run: |
          echo "Waiting for deployment to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/plant-api
          
      - name: üìã Deployment status
        run: |
          echo "=== Pods ==="
          kubectl get pods -l app=plant-api
          echo ""
          echo "=== Service ==="
          kubectl get svc plant-api-service
          echo ""
          echo "=== HPA ==="
          kubectl get hpa plant-api-hpa
          
      - name: üß™ Test deployed API
        run: |
          echo "Waiting for service..."
          sleep 15
          
          echo "Testing API..."
          curl -f http://localhost:30080/health || echo "‚ö†Ô∏è API not ready yet (this is normal for first deployment)"
          
      - name: üßπ Cleanup old images
        run: |
          docker image prune -f --filter "until=72h"
        continue-on-error: true

  integration-tests:
    name: üß™ Integration Tests
    needs: deploy-to-kubernetes
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          
      - name: üì¶ Install test deps
        run: pip install requests loguru
          
      - name: ‚è≥ Wait for API
        run: |
          echo "Waiting for API to be fully ready..."
          max_attempts=12
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:30080/health > /dev/null 2>&1; then
              echo "‚úÖ API is ready!"
              break
            fi
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts..."
            sleep 10
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå API did not become ready in time"
            kubectl logs -l app=plant-api --tail=50
            exit 1
          fi
          
      - name: üß™ Test endpoints
        run: |
          echo "=== Testing Health ==="
          curl -f http://localhost:30080/health
          
          echo ""
          echo "=== Testing Stats ==="
          curl -f http://localhost:30080/stats
          
          echo ""
          echo "=== Testing Model Info ==="
          curl -f http://localhost:30080/model/info
          
      - name: ‚úÖ Deployment successful
        run: |
          echo "============================================"
          echo "üéâ Deployment and tests completed successfully!"
          echo "============================================"
          echo ""
          echo "API URL: http://localhost:30080"
          echo "API Docs: http://localhost:30080/docs"
          echo ""
